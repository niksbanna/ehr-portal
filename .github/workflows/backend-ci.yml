name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

permissions:
  contents: read
  packages: write

jobs:
  lint:
    name: Backend Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint:check
      
      - name: Run Prettier check
        run: npm run format:check

  test:
    name: Backend Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ehr_user
          POSTGRES_PASSWORD: ehr_password
          POSTGRES_DB: ehr_portal_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://ehr_user:ehr_password@localhost:5432/ehr_portal_test?schema=public
        run: npx prisma migrate deploy
      
      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://ehr_user:ehr_password@localhost:5432/ehr_portal_test?schema=public
          JWT_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret
        run: npm run test
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://ehr_user:ehr_password@localhost:5432/ehr_portal_test?schema=public
          JWT_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret
        run: npm run test:cov
        continue-on-error: true

  build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 7

  docker:
    name: Backend Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: ehr-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/ehr-backend.tar
      
      - name: Load Docker image
        run: docker load --input /tmp/ehr-backend.tar
      
      - name: Test Docker image
        run: |
          docker run -d --name ehr-backend-test \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            -e JWT_SECRET=test-secret \
            -e JWT_REFRESH_SECRET=test-refresh-secret \
            -p 3000:3000 \
            ehr-backend:latest
          
          # Wait for the application to start
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health 2>/dev/null; then
              echo "Backend is healthy"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Backend failed to start"
              docker logs ehr-backend-test
              exit 1
            fi
            sleep 2
          done
          
          docker stop ehr-backend-test
          docker rm ehr-backend-test
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ehr-backend-image
          path: /tmp/ehr-backend.tar
          retention-days: 7

  migrations:
    name: Database Migrations Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: ehr_user
          POSTGRES_PASSWORD: ehr_password
          POSTGRES_DB: ehr_portal_migrations
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Run migrations
        env:
          DATABASE_URL: postgresql://ehr_user:ehr_password@localhost:5432/ehr_portal_migrations?schema=public
        run: npx prisma migrate deploy
      
      - name: Verify migrations
        env:
          DATABASE_URL: postgresql://ehr_user:ehr_password@localhost:5432/ehr_portal_migrations?schema=public
        run: npx prisma migrate status
