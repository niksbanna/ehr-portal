// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(DOCTOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  encounters    Encounter[]
  prescriptions Prescription[]
  labResults    LabResult[]
  observations  Observation[]
  medications   Medication[]
  auditLogs     AuditLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  LAB_TECH
  PHARMACIST
  BILLING
  RECEPTIONIST
}

model Patient {
  id                String   @id @default(uuid())
  firstName         String
  lastName          String
  dateOfBirth       String   // Format: DD-MM-YYYY
  gender            Gender
  phone             String   // Format: +91XXXXXXXXXX
  email             String
  aadhaar           String?  @unique // Format: XXXX-XXXX-XXXX (masked, last 4 digits)
  address           String
  city              String
  state             String
  pincode           String   // 6-digit Indian pincode
  emergencyContact  String
  emergencyPhone    String   // Format: +91XXXXXXXXXX
  bloodGroup        String?
  allergies         String?
  medicalHistory    String?
  registrationDate  String   // Format: DD-MM-YYYY
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  encounters    Encounter[]
  labResults    LabResult[]
  prescriptions Prescription[]
  medications   Medication[]
  bills         Bill[]
  observations  Observation[]

  @@map("patients")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Encounter {
  id              String          @id @default(uuid())
  patientId       String
  patient         Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId        String
  doctor          User            @relation(fields: [doctorId], references: [id])
  date            DateTime
  type            EncounterType
  chiefComplaint  String
  diagnosis       String
  diagnosisCode   String?
  notes           String
  status          EncounterStatus @default(SCHEDULED)
  vitalSigns      Json?
  soapNotes       Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  labResults    LabResult[]
  prescriptions Prescription[]
  medications   Medication[]
  bills         Bill[]
  observations  Observation[]

  @@map("encounters")
}

enum EncounterType {
  CONSULTATION
  FOLLOWUP
  EMERGENCY
}

enum EncounterStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model LabResult {
  id           String         @id @default(uuid())
  patientId    String
  patient      Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  encounterId  String?
  encounter    Encounter?     @relation(fields: [encounterId], references: [id])
  testName     String
  testCategory String
  orderedDate  DateTime
  reportDate   DateTime?
  status       LabStatus      @default(PENDING)
  results      String?
  normalRange  String?
  unit         String?
  remarks      String?
  orderedById  String
  orderedBy    User           @relation(fields: [orderedById], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("lab_results")
}

enum LabStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Prescription {
  id           String             @id @default(uuid())
  patientId    String
  patient      Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  encounterId  String
  encounter    Encounter          @relation(fields: [encounterId], references: [id])
  doctorId     String
  doctor       User               @relation(fields: [doctorId], references: [id])
  date         DateTime
  medications  Json
  instructions String?
  status       PrescriptionStatus @default(ACTIVE)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("prescriptions")
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  DISCONTINUED
}

model Bill {
  id            String        @id @default(uuid())
  patientId     String
  patient       Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  encounterId   String?
  encounter     Encounter?    @relation(fields: [encounterId], references: [id])
  date          DateTime
  items         Json          // Array of billing items with name, quantity, rate (in INR)
  subtotal      Float         // Amount in INR
  tax           Float         // Tax amount in INR (GST)
  discount      Float         @default(0) // Discount in INR
  total         Float         // Total amount in INR
  currency      String        @default("INR")
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("bills")
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NET_BANKING
  CHEQUE
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

model Setting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  category    String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

model Observation {
  id          String            @id @default(uuid())
  patientId   String
  patient     Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  encounterId String?
  encounter   Encounter?        @relation(fields: [encounterId], references: [id])
  recordedById String
  recordedBy  User              @relation(fields: [recordedById], references: [id])
  date        DateTime
  type        ObservationType
  category    String            // e.g., "vital-signs", "physical-exam", "laboratory"
  code        String?           // LOINC or SNOMED code
  display     String            // Human-readable name
  value       Json              // Can store different value types (quantity, text, boolean, etc.)
  unit        String?           // Unit of measurement
  interpretation String?        // e.g., "normal", "high", "low"
  notes       String?
  status      ObservationStatus @default(FINAL)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("observations")
}

enum ObservationType {
  VITAL_SIGN
  LABORATORY
  IMAGING
  PROCEDURE
  PHYSICAL_EXAM
  SOCIAL_HISTORY
}

enum ObservationStatus {
  REGISTERED
  PRELIMINARY
  FINAL
  AMENDED
  CANCELLED
}

model Medication {
  id              String           @id @default(uuid())
  patientId       String
  patient         Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  encounterId     String?
  encounter       Encounter?       @relation(fields: [encounterId], references: [id])
  name            String           // Medication name
  genericName     String?
  brandName       String?
  dosage          String           // e.g., "500mg"
  form            String           // e.g., "tablet", "syrup", "injection"
  route           String           // e.g., "oral", "IV", "topical"
  frequency       String           // e.g., "twice daily", "every 6 hours"
  duration        String           // e.g., "7 days", "1 month"
  quantity        Int?             // Number of units
  instructions    String?
  indication      String?          // Reason for medication
  startDate       DateTime
  endDate         DateTime?
  status          MedicationStatus @default(ACTIVE)
  pricePerUnit    Float?           // Price in INR
  totalCost       Float?           // Total cost in INR
  prescribedById  String?
  prescribedBy    User?            @relation(fields: [prescribedById], references: [id])
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("medications")
}

enum MedicationStatus {
  ACTIVE
  COMPLETED
  DISCONTINUED
  ON_HOLD
  CANCELLED
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique // e.g., "ADMIN", "DOCTOR", "NURSE"
  displayName String   // e.g., "Administrator", "Medical Doctor"
  description String?
  permissions Json     // Array of permission strings
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model AuditLog {
  id          String    @id @default(uuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  userRole    UserRole? // Role at the time of action
  action      String    // e.g., "CREATE", "UPDATE", "DELETE", "LOGIN", "LOGOUT"
  entity      String    // e.g., "Patient", "Encounter", "User"
  entityId    String?   // ID of the affected entity
  changes     Json?     // Before/after values for updates
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())
  status      String?   // e.g., "SUCCESS", "FAILURE"
  errorMessage String?

  @@index([userId])
  @@index([entity])
  @@index([timestamp])
  @@map("audit_logs")
}
